import telebot
import os

from telebot.types import InputMediaPhoto

from botrequests.query import *
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
API_KEY = os.getenv('x-rapidapi-key')
BOT = telebot.TeleBot(TOKEN)


# TEMP_DICT = {'city_of_destination': 0, "id": 0, 'num': 0, 'num_of_photos': 0}
# COMMANDS = {
#     "/lowprice": "lowprice",
#     "/highprice": "highprice",
#     "/bestdeal": "bestdeal",
#     "/history": "history"
# }

class DialogHandler:
    user_data = {}
    bot = BOT

    def __init__(self, id, command):
        self.response = None
        self.id = id
        self.command = command

    def get_city(self, message):
        self.user_data['city_of_destination'] = message.text
        self.user_data['id'] = message.from_user.id
        self.bot.send_message(message.from_user.id, "–ö—Ä—É—Ç–æ! –°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å?")
        self.bot.register_next_step_handler(message, self.get_number_of_variants)

    def get_number_of_variants(self, message):
        try:
            self.user_data['number_of_variants'] = int(message.text)
            if self.user_data['number_of_variants'] <= 0:
                raise Exception
            self.bot.send_message(self.id,
                                  "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –£–∂–µ –ø—Ä–æ–±–∏–≤–∞—é –ø–æ –±–∞–∑–∞–º. –ù—É–∂–Ω—ã –ª–∏ —Ç–µ–±–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏? –î–∞/–Ω–µ—Ç")
            self.bot.register_next_step_handler(message, self.get_photos)

        except Exception:
            self.bot.send_message(self.id, " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ üëâüèªüëàüèª\n–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å?")
            self.bot.register_next_step_handler(message, self.get_number_of_variants)

    def get_photos(self, message):
        are_photos_needed = message.text.lower()
        if are_photos_needed == '–¥–∞':
            self.bot.send_message(self.id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ?")
            self.bot.register_next_step_handler(message, self.get_number_of_photos)
        elif are_photos_needed == '–Ω–µ—Ç':
            self.bot.send_message(self.id, "–û–∫–µ–π, —Ä–∞–±–æ—Ç–∞—é!")
            self.user_data['number_of_photos'] = 0
            self.get_answer()
        else:
            self.bot.send_message(self.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ªü•≤\n–î–∞ –∏–ª–∏ –Ω–µ—Ç?")
            self.bot.register_next_step_handler(message, self.get_photos)

    def get_number_of_photos(self, message):
        number_of_photos = message.text
        try:
            self.user_data['number_of_photos'] = int(number_of_photos)
            self.bot.send_message(self.id, "–ü–æ–Ω—è–ª, —Ä–∞–±–æ—Ç–∞—é...")
            self.get_answer()

        except ValueError:
            self.bot.send_message(self.id,
                                  "–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—åü§Ø\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.\n–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–∫–∞–∑–∞—Ç—å?")
            self.bot.register_next_step_handler(message, self.get_number_of_photos)

    def get_answer(self):
        print('–ø–æ–≤–µ–∑–ª–æ –ø–æ–≤–µ–∑–ª–æ')
        print(self.user_data)
        return self.user_data

    def get_query(self, user_data):
        if self.command == "/lowprice":
            ql = QueryLowprice()
            self.response = ql.lowprice(user_data)
            print(self.response)
        self.send_response()

    def send_response(self):
        for result in self.response:
            photos = result.pop("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            print(photos)
            string = "\n".join([key + ": " + value for key, value in result.items()])
            self.bot.send_message(self.id, string)
            print(string)
            if photos is not None:
                print("there are photos to send")
                photos_tg = [InputMediaPhoto(media=el) for el in photos]
                photos_string = "\n–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: "
                self.bot.send_media_group(self.id, photos_tg)




class DialogHandlerLowprice(DialogHandler):

    def get_answer(self):
        print("–ú–Ω–µ –ø–æ–≤–µ–∑–ª–æ –ø–æ–≤–µ–∑–ª–æ —è –ª–æ—É–ø—Ä–∞–π—Å")
        BOT.clear_step_handler_by_chat_id(self.id)
        print(self.user_data)
        self.get_query(self.user_data)


class DialogHandlerHighprice(DialogHandler):
    def __init__(self, command, id):
        super().__init__(id)
        self.command = command

    def get_answer(self):
        print("–ú–Ω–µ –ø–æ–≤–µ–∑–ª–æ –ø–æ–≤–µ–∑–ª–æ —è —Ö–∞–π–ø—Ä–∞–π—Å")
        print(self.user_data)
        return self.user_data


class DialogHandlerBestDeal(DialogHandler):
    def __init__(self, command, id):
        super().__init__(id)
        self.command = command

    def get_number_of_variants(self, message):
        try:
            self.user_data['number_of_variants'] = int(message.text)
            if self.user_data['number_of_variants'] <= 0:
                raise Exception
            self.bot.send_message(self.id,
                                  "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å")
            self.bot.register_next_step_handler(message, self.get_min_price)

        except Exception:
            self.bot.send_message(self.id, " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ üëâüèªüëàüèª\n–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å?")
            self.bot.register_next_step_handler(message, self.get_number_of_variants)

    def get_min_price(self, message):
        try:
            self.user_data["min_price"] = float(message.text)
            self.bot.send_message(self.id, "–°—É–ø–µ—Ä! T–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é")
            self.bot.register_next_step_handler(message, self.get_max_price)
        except Exception:
            self.bot.send_message(self.id, " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É üëâüèªüëàüèª")
            self.bot.register_next_step_handler(message, self.get_min_price)

    def get_max_price(self, message):
        try:
            self.user_data["max_price"] = float(message.text)
            if self.user_data["max_price"] <= self.user_data["min_price"]:
                raise Exception
            self.bot.send_message(self.id, "–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞")
            self.bot.register_next_step_handler(message, self.get_miles)
        except Exception:
            self.bot.send_message(self.id, " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É üëâüèªüëàüèª")
            self.bot.register_next_step_handler(message, self.get_max_price)

    def get_miles(self, message):
        try:
            self.user_data["miles"] = int(message.text)
            if self.user_data["miles"] <= 0:
                raise Exception
            self.bot.send_message(self.id,
                                  "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –£–∂–µ –ø—Ä–æ–±–∏–≤–∞—é –ø–æ –±–∞–∑–∞–º. –ù—É–∂–Ω—ã –ª–∏ —Ç–µ–±–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏? –î–∞/–Ω–µ—Ç")
            self.bot.register_next_step_handler(message, self.get_photos)
        except Exception:
            self.bot.send_message(self.id, " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µü•∫")
            self.bot.register_next_step_handler(message, self.get_miles)

    def get_answer(self):
        print("–ú–Ω–µ –ø–æ–≤–µ–∑–ª–æ –ø–æ–≤–µ–∑–ª–æ —è –±–µ—Å—Ç –¥–µ–∞–ª")
        print(self.user_data)
        return self.user_data


@BOT.message_handler(commands=["start", "lowprice", "highprice", "bestdeal", "history"])
def get_text_message(message):
    if message.text == '/start':
        BOT.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!ü§ó\n\n"
                                               f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {BOT.get_me().first_name},"
                                               f" –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –≥–æ—Ä–æ–¥–µ!\n\n"
                                               f"–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ /help")

    elif message.text in ["/lowprice", "/highprice", "/bestdeal"]:
        BOT.send_message(message.from_user.id, f"–ö–ª–∞—Å—Å, —Ç–µ–ø–µ—Ä—å"
                                               f" –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,"
                                               f" –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å\n‚ú®‚ú®‚ú®\n–ù–∞–ø—Ä–∏–º–µ—Ä, –ú–∏–Ω—Å–∫")
        if message.text == "/lowprice":
            dh = DialogHandlerLowprice(message.from_user.id, message.text)
        elif message.text == "/highprice":
            dh = DialogHandlerHighprice(message.from_user.id,message.text)
        elif message.text == "/bestdeal":
            dh = DialogHandlerBestDeal(message.from_user.id,message.text)
        BOT.register_next_step_handler(message, dh.get_city)

    elif message.text == '/history':
        pass
        # command = COMMANDS.get(message.text)
        # answer = BOT.register_next_step_handler(message, get_city)
        # print(answer)


@BOT.message_handler(content_types=["text"])
def hello(message):
    if message.text in ["–ü—Ä–∏–≤–µ—Ç", "/hello_world"]:
        BOT.send_message(message.from_user.id, "–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!")


if __name__ == '__main__':
    BOT.polling(none_stop=True)

#
# def show_variants(variants, user_id):
#     bot.send_message(user_id, "–°–º–æ—Ç—Ä–∏, —á—Ç–æ —è –Ω–∞—à–µ–ª:")
#     data = ""
#     for variant in variants:
#         for key in variant.keys():
#             if variant[key] is not None:
#                 data+=str(key)
#                 data+=": "
#                 if isinstance(variant[key], list):
#                     for url in variant[key]:
#                         data+=str(url)+"\n"
#                 else:
#                     data+=str(variant[key])
#             data += "\n"
#         data+="\n"
#     data += "\n"
#     bot.send_message(user_id, data)
#
#
# def get_city(message):
#
#     TEMP_DICT['city_of_destination'] = message.text
#     TEMP_DICT['id'] = message.from_user.id
#     bot.send_message(message.from_user.id, "–ö—Ä—É—Ç–æ! –°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å?")
#     bot.register_next_step_handler(message, get_num)
#
#
# def get_num(message): try: TEMP_DICT['num'] = int(message.text) if TEMP_DICT['num'] <= 0: raise Exception
# bot.send_message(message.from_user.id, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –£–∂–µ –ø—Ä–æ–±–∏–≤–∞—é –ø–æ –±–∞–∑–∞–º. –ù—É–∂–Ω—ã –ª–∏ —Ç–µ–±–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏? –î–∞/–Ω–µ—Ç")
# bot.register_next_step_handler(message, get_photos) except ValueError: bot.send_message(message.from_user.id,
# "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª(") except Exception: pass
#
#
# def get_photos(message):
#     are_photos_needed = message.text.lower()
#     if are_photos_needed == '–¥–∞':
#         bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ?")
#         bot.register_next_step_handler(message, get_num_of_photos)
#     elif are_photos_needed == '–Ω–µ—Ç':
#         bot.send_message(message.from_user.id, "–û–∫–µ–π, —Ä–∞–±–æ—Ç–∞—é!")
#         TEMP_DICT['num_of_photos'] = 0
#         answer = lowprice(TEMP_DICT)
#         if isinstance(answer, Exception):
#             bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
#         else:
#             show_variants(answer, message.from_user.id)
#     else:
#         bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª(")
#
#
# def get_num_of_photos(message):
#     num_of_photos = message.text
#     try:
#         TEMP_DICT['num_of_photos'] = int(num_of_photos)
#         bot.send_message(message.from_user.id, "–ü–æ–Ω—è–ª, —Ä–∞–±–æ—Ç–∞—é...")
#         answer = lowprice(TEMP_DICT)
#         if isinstance(answer, Exception):
#             bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
#         else:
#             show_variants(answer, message.from_user.id)
#
#     except ValueError:
#         bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...")
#
#
# @bot.message_handler(commands=["start", "lowprice", "highprice", "bestdeal", "history"])
# def get_text_message(message):
#     if message.text == '/start':
#         bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!ü§ó\n\n"
#                                                f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {bot.get_me().first_name},"
#                                                f" –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –≥–æ—Ä–æ–¥–µ!\n\n"
#                                                f"–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ /help")
#     elif message.text in ["/lowprice", "/highprice", "/bestdeal"]:
#         bot.send_message(message.from_user.id, f"–ö–ª–∞—Å—Å, —Ç–µ–ø–µ—Ä—å"
#                                                f" –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,"
#                                                f" –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä, –ú–∏–Ω—Å–∫")
#     elif message.text == '/history':
#         pass
#     # command = COMMANDS.get(message.text)
#     bot.register_next_step_handler(message, get_city)
#
#
#
# @bot.message_handler(content_types=["text"])
# def hello(message):
#     if message.text in ["–ü—Ä–∏–≤–µ—Ç", "/hello_world"]:
#         bot.send_message(message.from_user.id, "–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!")
#     else:
#
#         url = 'https://exp.cdn-hotels.com/hotels/49000000/48470000/48461200/48461122/9bbd8813_z.jpg'
#
#
#         bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é!")
#
#
# if __name__ == '__main__':
#     bot.polling(none_stop=True)
