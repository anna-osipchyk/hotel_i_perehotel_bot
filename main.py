import datetime

from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar

from bot_start import BOT
from botrequests.bestdeal import QueryBestdeal
from botrequests.highprice import QueryHighprice
from botrequests.history import history
from botrequests.lowprice import QueryLowprice
import logging


class Calendar(DetailedTelegramCalendar):
    prev_button = "üëàüèªÔ∏è"
    next_button = "üëâüèª"
    empty_year_button = "üö´"

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.min_date = datetime.date.today()


def check_dates(date1, date2=None):
    if date2 is not None and date1 > date2:
        return False
    elif date2 is False:
        return False
    return True


def choose_command_and_create_instance(id, command, message, photos_needed=False):
    dh = None
    if command == "/lowprice":
        dh = DialogHandlerLowprice(id, command)
    elif command == "/highprice":
        dh = DialogHandlerHighprice(id, command)
    elif command == "/bestdeal":
        dh = DialogHandlerBestDeal(id, command)
    if photos_needed:
        logger.info(
            f"–°–æ–∑–¥–∞–ª—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä DialogHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}"
        )
        BOT.register_next_step_handler(message, dh.get_number_of_photos)
    else:
        logger.info(
            f"–°–æ–∑–¥–∞–ª—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä DialogHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}"
        )
        BOT.register_next_step_handler(message, dh.get_city)


class CommandMixin:
    def __init__(self, command):
        self.command = command


class User(CommandMixin):
    users = {}
    self_like_id = None

    def __init__(self, id, command):
        super().__init__(command)
        self.id = id
        User.add_user(id, self)

    @classmethod
    def add_user(cls, id, user):
        cls.users[id] = user

    @classmethod
    def get_user(cls, id, command=None):
        if id in User.users:
            user = User.users[id]
            user.command = command
            return user
        logger.info(f"–°–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id}")
        return User(id, command)

    @staticmethod
    def get_dates(id):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        calendar = Calendar(locale="ru", calendar_id=1).build()[0]
        User.self_like_id = id
        BOT.send_message(id, f"–í –∫–∞–∫–æ–º –≥–æ–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è? ", reply_markup=calendar)

    @staticmethod
    @BOT.callback_query_handler(
        func=lambda call: call.data
        in ["yes_1", "yes_2", "yes_3", "no_1", "no_2", "no_3"]
    )
    def call(c):
        if c.data == "yes_1":
            calendar, step = Calendar(locale="ru", calendar_id=2).build()
            BOT.send_message(
                c.message.chat.id,
                f"–ó–¥–æ—Ä–æ–≤–æ! –ù–∞–ø–∏—à–∏ –≥–æ–¥, –∫–æ–≥–¥–∞ —Ç—ã –≤–µ—Ä–Ω–µ—à—å—Å—è: ",
                reply_markup=calendar,
            )
        elif c.data == "no_1":
            DialogHandler.user_data.pop("arrival")
            calendar, step = Calendar(locale="ru", calendar_id=1).build()
            BOT.send_message(
                c.message.chat.id, f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≥–æ–¥: ", reply_markup=calendar
            )

        elif c.data == "yes_2":
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            yes_btn = types.InlineKeyboardButton(text="–¥–∞", callback_data="yes_3")
            no_btn = types.InlineKeyboardButton(text="–Ω–µ—Ç", callback_data="no_3")
            keyboard.add(yes_btn, no_btn)
            BOT.send_message(
                c.message.chat.id, "–¢–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?", reply_markup=keyboard
            )

        elif c.data == "no_2":
            DialogHandler.user_data.pop("arrival")
            calendar, step = Calendar(locale="ru", calendar_id=1).build()
            BOT.send_message(
                c.message.chat.id, f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≥–æ–¥: ", reply_markup=calendar
            )
        elif c.data == "yes_3":
            BOT.send_message(
                c.message.chat.id, "–ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—åüì∏"
            )
            id, command = User.self_like_id, User.users[User.self_like_id].command
            choose_command_and_create_instance(id, command, c.message, True)

        elif c.data == "no_3":
            BOT.send_message(
                c.message.chat.id,
                f"–ö–ª–∞—Å—Å, —Ç–µ–ø–µ—Ä—å"
                f" –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,"
                f" –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å\n‚ú®‚ú®‚ú®\n–ù–∞–ø—Ä–∏–º–µ—Ä, –ú–∏–Ω—Å–∫",
            )
            id, command = User.self_like_id, User.users[User.self_like_id].command
            choose_command_and_create_instance(id, command, c.message)

    @staticmethod
    @BOT.callback_query_handler(func=Calendar.func(calendar_id=1))
    def call(c):
        step_dict = {"y": "–≥–æ–¥", "m": "–º–µ—Å—è—Ü", "d": "–¥–µ–Ω—å"}

        result, key, step = Calendar(locale="ru", calendar_id=1).process(c.data)
        if not result and key:
            BOT.edit_message_text(
                f"–í—ã–±–µ—Ä–∏ {step_dict[step]}",
                c.message.chat.id,
                c.message.message_id,
                reply_markup=key,
            )
        elif result:
            DialogHandler.user_data["arrival"] = result
            is_valid = check_dates(
                DialogHandler.user_data["arrival"],
                DialogHandler.user_data.get("departure", None),
            )
            if is_valid:
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                yes_btn = types.InlineKeyboardButton(text="–¥–∞", callback_data="yes_1")
                no_btn = types.InlineKeyboardButton(text="–Ω–µ—Ç", callback_data="no_1")
                keyboard.add(yes_btn, no_btn)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞—Ç—É {result}")
                BOT.send_message(
                    c.message.chat.id,
                    f"–¢–≤–æ—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {result}. –í—Å–µ –≤–µ—Ä–Ω–æ?",
                    reply_markup=keyboard,
                )
            else:

                logger.warning(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É"
                )
                BOT.send_message(
                    c.message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑"
                )
                calendar, step = Calendar(locale="ru", calendar_id=1).build()
                BOT.send_message(
                    c.message.chat.id, f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≥–æ–¥: ", reply_markup=calendar
                )

    @staticmethod
    @BOT.callback_query_handler(func=Calendar.func(calendar_id=2))
    def call(c):
        step_dict = {"y": "–≥–æ–¥", "m": "–º–µ—Å—è—Ü", "d": "–¥–µ–Ω—å"}
        result, key, step = Calendar(locale="ru", calendar_id=2).process(c.data)
        if not result and key:
            BOT.edit_message_text(
                f"–í—ã–±–µ—Ä–∏ {step_dict[step]}",
                c.message.chat.id,
                c.message.message_id,
                reply_markup=key,
            )
        elif result:
            DialogHandler.user_data["departure"] = result
            is_valid = check_dates(
                DialogHandler.user_data["arrival"],
                DialogHandler.user_data.get("departure", None),
            )
            if is_valid:
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                yes_btn = types.InlineKeyboardButton(text="–¥–∞", callback_data="yes_2")
                no_btn = types.InlineKeyboardButton(text="–Ω–µ—Ç", callback_data="no_2")
                keyboard.add(yes_btn, no_btn)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞—Ç—É {result}")
                BOT.send_message(
                    c.message.chat.id,
                    f"–¢–≤–æ—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {result}. –í—Å–µ –≤–µ—Ä–Ω–æ?",
                    reply_markup=keyboard,
                )
            else:
                BOT.send_message(
                    c.message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑"
                )
                logger.warning(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É"
                )
                calendar, step = Calendar(locale="ru", calendar_id=2).build()
                BOT.send_message(
                    c.message.chat.id, f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≥–æ–¥: ", reply_markup=calendar
                )


class DialogHandler(User):
    user_data = {}
    bot = BOT

    def __init__(self, id, command):
        super().__init__(id, command)
        self.response = None

    def get_number_of_photos(self, message):
        number_of_photos = message.text
        try:
            if message.content_type != "text":
                raise ValueError
            self.user_data["number_of_photos"] = int(number_of_photos)
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª {number_of_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            )
            self.bot.send_message(
                self.id,
                f"–ö–ª–∞—Å—Å, —Ç–µ–ø–µ—Ä—å"
                f" –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,"
                f" –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å\n‚ú®‚ú®‚ú®\n–ù–∞–ø—Ä–∏–º–µ—Ä, –ú–∏–Ω—Å–∫",
            )
            self.bot.register_next_step_handler(message, self.get_city)

        except ValueError:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            )
            self.bot.send_message(
                self.id,
                "–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—åü§Ø\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.\n–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–∫–∞–∑–∞—Ç—å?",
            )
            self.bot.register_next_step_handler(message, self.get_number_of_photos)
        except Exception:
            logger.error(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            )
            self.bot.send_message(
                self.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æüòá"
            )

    def get_city(self, message):
        try:
            if message.content_type != "text":
                raise ValueError
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥–æ—Ä–æ–¥ {message.text}")
            self.user_data["city_of_destination"] = message.text
            self.user_data["id"] = message.from_user.id
            self.bot.send_message(self.id, "–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?")
            self.bot.register_next_step_handler(message, self.get_number_of_variants)
        except ValueError:
            self.bot.send_message(
                self.id, "–¢—ã —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ü§î? –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!"
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
            self.bot.register_next_step_handler(message, self.get_city)

        except Exception:
            logger.error(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            )
            self.bot.send_message(
                self.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æüòá"
            )

    def get_number_of_variants(self, message):
        try:
            if message.content_type != "text":
                raise ValueError
            self.user_data["number_of_variants"] = int(message.text)
            if self.user_data["number_of_variants"] <= 0:
                raise ValueError
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–ª-–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ {message.text}"
            )
            self.bot.send_message(self.id, "–ü–æ–Ω—è–ª! –†–∞–±–æ—Ç–∞—é...")
            self.get_answer()

        except ValueError:
            self.bot.send_message(
                self.id,
                " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ üëâüèªüëàüèª\n–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å?",
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            self.bot.register_next_step_handler(message, self.get_number_of_variants)
        except Exception:
            logger.error(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            )
            self.bot.send_message(
                self.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æüòá"
            )

    def get_answer(self):
        return self.user_data

    def get_query(self, user_data):
        ql = None
        if self.command == "/lowprice":
            ql = QueryLowprice(BOT, self.id)
        elif self.command == "/highprice":
            ql = QueryHighprice(BOT, self.id)
        elif self.command == "/bestdeal":
            ql = QueryBestdeal(BOT, self.id)
        self.response = ql.get_response(user_data)
        if isinstance(self.response, Exception):
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.bot.send_message(self.id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ªüò£")
            return
        else:
            logger.info(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
            )
            self.user_data.clear()
        return


class DialogHandlerLowprice(DialogHandler):
    def get_answer(self):
        logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_answer lowprice")
        number_of_photos = self.user_data.get("number_of_photos", 0)
        self.user_data["number_of_photos"] = number_of_photos
        BOT.clear_step_handler_by_chat_id(self.id)
        self.get_query(self.user_data)


class DialogHandlerHighprice(DialogHandler):
    def get_answer(self):
        logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_answer highprice")
        number_of_photos = self.user_data.get("number_of_photos", 0)
        self.user_data["number_of_photos"] = number_of_photos
        BOT.clear_step_handler_by_chat_id(self.id)
        self.get_query(self.user_data)


class DialogHandlerBestDeal(DialogHandler):
    def get_city(self, message):
        if message.content_type != "text":
            raise ValueError
        try:
            self.user_data["city_of_destination"] = str(message.text)
            self.user_data["id"] = message.from_user.id
            self.bot.send_message(self.id, "–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥–æ—Ä–æ–¥ {message.text}")

            self.bot.register_next_step_handler(message, self.get_number_of_variants)
        except ValueError:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
            )
            self.bot.send_message(
                self.id, "–¢—ã —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ü§î? –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!"
            )
            self.bot.register_next_step_handler(message, self.get_city)

        except Exception:
            logger.error(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            )
            self.bot.send_message(
                self.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æüòá"
            )

    def get_number_of_variants(self, message):
        try:
            if message.content_type != "text":
                raise ValueError
            self.user_data["number_of_variants"] = int(message.text)
            if self.user_data["number_of_variants"] <= 0:
                raise ValueError
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª {message.text} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

            self.bot.send_message(
                self.id, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å ($)"
            )
            self.bot.register_next_step_handler(message, self.get_min_price)

        except ValueError:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
            )
            self.bot.send_message(
                self.id,
                " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ üëâüèªüëàüèª\n–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å?",
            )
            self.bot.register_next_step_handler(message, self.get_number_of_variants)

        except Exception:
            logger.error(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            )
            self.bot.send_message(
                self.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æüòá"
            )

    def get_min_price(self, message):
        try:
            if message.content_type != "text":
                raise ValueError
            self.user_data["min_price"] = int(message.text)
            if self.user_data["min_price"] <= 0:
                raise ValueError
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É {message.text}"
            )

            self.bot.send_message(self.id, "–°—É–ø–µ—Ä! T–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é ($)")
            self.bot.register_next_step_handler(message, self.get_max_price)
        except ValueError:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"
            )
            self.bot.send_message(self.id, " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É üëâüèªüëàüèª")
            self.bot.register_next_step_handler(message, self.get_min_price)

        except Exception:
            logger.error(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            )
            self.bot.send_message(
                self.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æüòá"
            )

    def get_max_price(self, message):
        try:
            if message.content_type != "text":
                raise ValueError
            self.user_data["max_price"] = int(message.text)
            if self.user_data["max_price"] <= self.user_data["min_price"]:
                raise ValueError
            self.bot.send_message(
                self.id,
                "–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–∫–º)",
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É {message.text}"
            )
            self.bot.register_next_step_handler(message, self.get_miles)
        except ValueError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
            self.bot.send_message(self.id, " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É üëâüèªüëàüèª")
            self.bot.register_next_step_handler(message, self.get_max_price)

        except Exception:
            logger.error(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            )
            self.bot.send_message(
                self.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æüòá"
            )

    def get_miles(self, message):
        try:
            if message.content_type != "text":
                raise ValueError
            self.user_data["miles"] = int(message.text)
            if self.user_data["miles"] <= 0:
                raise ValueError
            self.bot.send_message(self.id, "–ü–æ–Ω—è–ª! –†–∞–±–æ—Ç–∞—é...")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª  {message.text} –∫–º")
            self.get_answer()
        except ValueError:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞"
            )
            self.bot.send_message(self.id, " –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µü•∫")
            self.bot.register_next_step_handler(message, self.get_miles)

        except Exception:
            logger.error(
                f"–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            )
            self.bot.send_message(
                self.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æüòá"
            )

    def get_answer(self):
        logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_answer bestdeal")
        number_of_photos = self.user_data.get("number_of_photos", 0)
        self.user_data["number_of_photos"] = number_of_photos
        BOT.clear_step_handler_by_chat_id(self.id)
        self.get_query(self.user_data)


@BOT.message_handler(
    commands=["start", "lowprice", "highprice", "bestdeal", "history", "help"]
)
def get_text_message(message):
    if message.text == "/start":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        BOT.send_message(
            message.from_user.id,
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!ü§ó\n\n"
            f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {BOT.get_me().first_name},"
            f" –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –≥–æ—Ä–æ–¥–µ!\n\n"
            f"–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ /help",
        )

    elif message.text in ["/lowprice", "/highprice", "/bestdeal"]:
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É {message.text}"
        )
        user = User.get_user(message.from_user.id, message.text)
        user.get_dates(user.id)

    elif message.text == "/history":
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É {message.text}"
        )
        user = User.get_user(message.from_user.id, message.text)
        history(user.id)
    elif message.text == "/help":
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É {message.text}"
        )

        string = (
            f"_/lowprice: –ü–æ–¥–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏._"
            f"_–¢–µ–±–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —Å–∞–º—ã–µ –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ãüòá_\n"
            f"\n"
            f"\n"
            f"_/highrice: –ü–æ–¥–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–∞–∫–∂–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏._"
            f"_–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã, —Ç—ã —É–≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ –∏ –¥–æ—Ä–æ–≥–∏–µ –æ—Ç–µ–ª–∏ –∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ãü§©_\n"
            f"\n"
            f"\n"
            f"_/bestdeal: –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç—ã —Å–∞–º(–∞) —Å–º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ - –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ü•∞_"
            f"\n"
            f"\n"
            f"_/history: –¢—ã —É–≤–∏–¥–∏—à—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏‚ò∫_\n"
        )
        BOT.send_message(message.from_user.id, string, parse_mode="Markdown")


@BOT.message_handler(content_types=["text"])
def hello(message):
    if message.text in ["–ü—Ä–∏–≤–µ—Ç", "/hello_world"]:
        BOT.send_message(message.from_user.id, "–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!")


if __name__ == "__main__":

    logger = logging.getLogger(__name__)
    consoleHandler = logging.StreamHandler()
    logger.addHandler(consoleHandler)
    logging.basicConfig(
        filename="logging.log",
        level=logging.INFO,
        format="%(asctime)s - [%(levelname)s]  - (%(filename)s).%(funcName)s(%(lineno)d) - %("
        "message)s",
    )

    BOT.polling(none_stop=True)
